# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
    args:
      TARGETARCH: arm64
  env_file: &airflow-common-env
    - ./docker/airflow/envs/airflow-common.env
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/docker/airflow/secrets_backend/connections.yml:/data/connections.yml
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    volumes:
        - redis-volume:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
      # yamllint enable rule:line-length
    env_file: *airflow-common-env
    environment:
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/docker/airflow/secrets_backend/connections.yml:/data/connections.yml
      - ./docker/sftp/ssh/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key
      - ./docker/nfs/shared:/shared/data
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: [/airflow_init.sh]
    env_file: *airflow-common-env
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/blog_airflow:/sources
      - ./docker/airflow/scripts/airflow_init.sh:/airflow_init.sh

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    env_file: *airflow-common-env
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  datawarehouse:
    image: postgres:16.1
    ports:
      - 5432:5432
    env_file:
      - ./docker/postgres/envs/datawarehouse.env
    volumes:
      - ./docker/postgres/scripts/postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - datawarehouse-db-volume:/var/lib/postgresql/data
      - ./docker/nfs/shared:/shared
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "dw-blogs"]
      interval: 5s
      retries: 5
    restart: always

  sftp-server:
    image: atmoz/sftp:debian
    volumes:
      - ./data:/home/blog_user/upload
      - ./docker/sftp/ssh/ssh_host_rsa_key.pub:/home/blog_user/.ssh/keys/ssh_host_rsa_key.pub
    ports:
      - "2222:22"
    command: blog_user:password:1001

  spark-main:
    image: bitnami/spark:3.5.0
    env_file:
      - ./docker/spark/envs/spark-primary.env
    volumes:
      - ./docker/nfs/shared:/shared/data
    ports:
      - '8180:8080'
      - '7077:7077'

  spark-worker:
    image: bitnami/spark:3.5.0
    env_file:
      - ./docker/spark/envs/spark-secondary.env
    volumes:
      - ./docker/nfs/shared:/shared/data
    ports:
      - '8081:8081'

volumes:
  postgres-db-volume:
  datawarehouse-db-volume:
  redis-volume:
